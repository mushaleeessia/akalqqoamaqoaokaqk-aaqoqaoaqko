
import { useState, useEffect } from 'react';
import { ref, onValue, get } from 'firebase/database';
import { database } from '@/lib/firebase';

interface BlogPost {
  id: string;
  title: string;
  date: string;
  excerpt: string;
  content: string;
  author: string;
}

export const useFirebaseData = () => {
  const [about, setAbout] = useState("Moderadora apaixonada do MushMC, mantendo nossa comunidade segura e divertida! Amo construir, explorar e ajudar outros jogadores.");
  const [posts, setPosts] = useState<BlogPost[]>([
    {
      id: "1",
      title: "Bem-vindos ao MushMC!",
      date: "13 de Junho, 2025",
      excerpt: "Uma nova jornada comeÃ§ou no servidor mais incrÃ­vel do Minecraft Brasil...",
      content: "OlÃ¡, pessoal! Estou muito animada para compartilhar com vocÃªs algumas novidades incrÃ­veis que estÃ£o acontecendo no MushMC. Como moderadora, tenho visto nossa comunidade crescer de forma incrÃ­vel, e cada dia traz novas aventuras e amizades. Temos novos mundos para explorar, eventos especiais toda semana, e uma comunidade que realmente se importa uns com os outros. Se vocÃª ainda nÃ£o faz parte da nossa famÃ­lia MushMC, este Ã© o momento perfeito para se juntar a nÃ³s!",
      author: "aleeessia"
    },
    {
      id: "2",
      title: "Evento de ConstruÃ§Ã£o - Resultados",
      date: "10 de Junho, 2025", 
      excerpt: "Os resultados do nosso Ãºltimo evento de construÃ§Ã£o estÃ£o aqui...",
      content: "Wow! O evento de construÃ§Ã£o desta semana foi absolutamente incrÃ­vel. Vimos algumas das construÃ§Ãµes mais criativas que jÃ¡ passaram pelo servidor. Desde castelos medievais atÃ© cidades futuristas, nossa comunidade realmente mostrou do que Ã© capaz. ParabÃ©ns a todos os participantes e um agradecimento especial aos nossos juÃ­zes voluntÃ¡rios. O prÃ³ximo evento jÃ¡ estÃ¡ sendo planejado - fiquem atentos aos anÃºncios!",
      author: "aleeessia"
    }
  ]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    console.log('ðŸ”¥ Firebase hook iniciado - configurando listeners...');
    console.log('ðŸ”¥ Database object:', database);
    console.log('ðŸ”¥ Database URL:', database.app.options.databaseURL);
    
    // Teste direto com get() para verificar conectividade - CAMINHOS CORRIGIDOS
    const testConnection = async () => {
      try {
        console.log('ðŸ”¥ ðŸ§ª TESTE: Tentando get() na raiz...');
        const rootRef = ref(database, '/');
        const rootSnapshot = await get(rootRef);
        console.log('ðŸ”¥ ðŸ§ª Root exists?', rootSnapshot.exists());
        console.log('ðŸ”¥ ðŸ§ª Root val:', rootSnapshot.val());
        
        console.log('ðŸ”¥ ðŸ§ª TESTE: Tentando get() em a/profile/about...');
        const aboutTestRef = ref(database, 'a/profile/about');
        const aboutSnapshot = await get(aboutTestRef);
        console.log('ðŸ”¥ ðŸ§ª About get() exists?', aboutSnapshot.exists());
        console.log('ðŸ”¥ ðŸ§ª About get() val:', aboutSnapshot.val());
        
        console.log('ðŸ”¥ ðŸ§ª TESTE: Tentando get() em a/blog...');
        const blogTestRef = ref(database, 'a/blog');
        const blogSnapshot = await get(blogTestRef);
        console.log('ðŸ”¥ ðŸ§ª Blog get() exists?', blogSnapshot.exists());
        console.log('ðŸ”¥ ðŸ§ª Blog get() val:', blogSnapshot.val());
        
      } catch (error) {
        console.error('ðŸ”¥ ðŸ§ª ERRO no teste:', error);
      }
    };
    
    testConnection();
    
    // Listen for about section changes - CAMINHO CORRIGIDO
    const aboutRef = ref(database, 'a/profile/about');
    console.log('ðŸ”¥ About ref criado:', aboutRef.toString());
    
    const aboutUnsubscribe = onValue(aboutRef, (snapshot) => {
      console.log('ðŸ”¥ About snapshot recebido!');
      console.log('ðŸ”¥ About snapshot existe?', snapshot.exists());
      console.log('ðŸ”¥ About snapshot val:', snapshot.val());
      
      const data = snapshot.val();
      if (data !== null && data !== undefined) {
        console.log('ðŸ”¥ Atualizando about com:', data);
        setAbout(data);
      } else {
        console.log('ðŸ”¥ About data Ã© null/undefined - mantendo valor padrÃ£o');
      }
    }, (error) => {
      console.error('ðŸ”¥ Erro no listener about:', error);
    });

    // Listen for blog posts changes - CAMINHO CORRIGIDO
    const postsRef = ref(database, 'a/blog');
    console.log('ðŸ”¥ Posts ref criado:', postsRef.toString());
    
    const postsUnsubscribe = onValue(postsRef, (snapshot) => {
      console.log('ðŸ”¥ Blog snapshot recebido!');
      console.log('ðŸ”¥ Blog snapshot existe?', snapshot.exists());
      console.log('ðŸ”¥ Blog snapshot val:', snapshot.val());
      
      const data = snapshot.val();
      if (data && typeof data === 'object') {
        // Converter a estrutura do Firebase para array de posts
        const postsArray = Object.keys(data).map(key => ({
          id: key,
          title: data[key].title || 'TÃ­tulo nÃ£o encontrado',
          date: data[key].date || 'Data nÃ£o encontrada',
          excerpt: data[key].excerpt || 'Resumo nÃ£o encontrado',
          content: data[key].content || 'ConteÃºdo nÃ£o encontrado',
          author: data[key].author || 'aleeessia'
        }));
        console.log('ðŸ”¥ Posts processados:', postsArray);
        setPosts(postsArray);
      } else {
        console.log('ðŸ”¥ Blog data Ã© null/undefined - mantendo posts padrÃ£o');
      }
      setLoading(false);
    }, (error) => {
      console.error('ðŸ”¥ Erro no listener blog:', error);
      setLoading(false);
    });

    return () => {
      console.log('ðŸ”¥ Limpando listeners...');
      aboutUnsubscribe();
      postsUnsubscribe();
    };
  }, []);

  return { about, posts, loading };
};
